
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import tokens.Token;
import lexer.VSOPLexer;
import java_cup.runtime.ComplexSymbolFactory.Location;
import AST.*;
import exceptions.ParserError;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\011\006\000\002\011\010\000\002" +
    "\012\011\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\010\004" +
    "\000\002\010\003\000\002\007\005\000\002\007\003\000" +
    "\002\014\005\000\002\015\006\000\002\016\005\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\010\000\002\020\003\000\002\020\006\000\002\020\010" +
    "\000\002\020\012\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\010\000\002\021\006\000" +
    "\002\021\010\000\002\021\006\000\002\021\010\000\002" +
    "\021\012\000\002\021\005\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\010\000\002\022\006\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\022\003\000\002\025\004\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\002\uffb0\006\uffb0\001\002\000\004\002" +
    "\303\001\002\000\006\002\ufffe\006\ufffe\001\002\000\006" +
    "\002\000\006\007\001\002\000\004\052\011\001\002\000" +
    "\006\002\uffff\006\uffff\001\002\000\006\011\013\027\012" +
    "\001\002\000\006\030\uffb0\051\uffb0\001\002\000\004\052" +
    "\015\001\002\000\006\002\ufffd\006\ufffd\001\002\000\004" +
    "\027\012\001\002\000\006\002\ufffc\006\ufffc\001\002\000" +
    "\006\030\021\051\022\001\002\000\006\030\ufff8\051\ufff8" +
    "\001\002\000\006\002\ufffb\006\ufffb\001\002\000\006\031" +
    "\025\033\026\001\002\000\006\030\ufffa\051\ufffa\001\002" +
    "\000\006\030\ufff9\051\ufff9\001\002\000\006\032\uffb0\051" +
    "\uffb0\001\002\000\014\005\033\015\032\022\030\025\027" +
    "\052\034\001\002\000\016\014\ufff0\027\ufff0\032\ufff0\034" +
    "\ufff0\035\ufff0\047\ufff0\001\002\000\016\014\ufff1\027\ufff1" +
    "\032\ufff1\034\ufff1\035\ufff1\047\ufff1\001\002\000\006\034" +
    "\035\047\036\001\002\000\016\014\ufff3\027\ufff3\032\ufff3" +
    "\034\ufff3\035\ufff3\047\ufff3\001\002\000\016\014\ufff2\027" +
    "\ufff2\032\ufff2\034\ufff2\035\ufff2\047\ufff2\001\002\000\016" +
    "\014\ufff4\027\ufff4\032\ufff4\034\ufff4\035\ufff4\047\ufff4\001" +
    "\002\000\006\030\ufff7\051\ufff7\001\002\000\036\012\055" +
    "\013\044\016\061\017\056\020\060\021\041\024\043\026" +
    "\040\027\046\031\063\037\054\050\051\051\042\053\050" +
    "\001\002\000\004\034\266\001\002\000\036\012\055\013" +
    "\044\016\061\017\056\020\060\021\041\024\043\026\040" +
    "\027\046\031\063\037\054\050\051\051\042\053\050\001" +
    "\002\000\036\012\055\013\044\016\061\017\056\020\060" +
    "\021\041\024\043\026\040\027\046\031\063\037\054\050" +
    "\051\051\042\053\050\001\002\000\052\004\uffbd\007\uffbd" +
    "\010\uffbd\014\uffbd\023\uffbd\030\uffbd\031\160\032\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\265\001\002\000" +
    "\046\004\uffb2\007\uffb2\010\uffb2\014\uffb2\023\uffb2\030\uffb2" +
    "\032\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002" +
    "\000\036\012\055\013\044\016\061\017\056\020\060\021" +
    "\041\024\043\026\040\027\046\031\063\037\054\050\051" +
    "\051\042\053\050\001\002\000\046\004\uffba\007\uffba\010" +
    "\uffba\014\uffba\023\uffba\030\uffba\032\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\001\002\000\036\012\uffb0\013\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\026\uffb0\027" +
    "\uffb0\031\uffb0\037\uffb0\050\uffb0\051\uffb0\053\uffb0\001\002" +
    "\000\040\004\117\023\uffe7\030\uffe7\032\uffe7\034\uffe7\035" +
    "\uffe7\036\123\037\116\040\127\041\125\042\120\043\124" +
    "\044\122\045\121\046\130\001\002\000\046\004\uffb5\007" +
    "\uffb5\010\uffb5\014\uffb5\023\uffb5\030\uffb5\032\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\001\002\000\046\004\uffb4" +
    "\007\uffb4\010\uffb4\014\uffb4\023\uffb4\030\uffb4\032\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\001\002\000\044\004" +
    "\071\007\uffe6\014\uffe6\023\uffe6\030\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\036\075\037\070\040\100\041\077\042\073\043" +
    "\076\044\074\045\072\046\101\001\002\000\046\004\uffe4" +
    "\007\uffe4\010\uffe4\014\uffe4\023\uffe4\030\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\001\002\000\036\012" +
    "\055\013\044\016\061\017\056\020\060\021\041\024\043" +
    "\026\040\027\046\031\063\037\054\050\051\051\042\053" +
    "\050\001\002\000\046\004\uffb1\007\uffb1\010\uffb1\014\uffb1" +
    "\023\uffb1\030\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\001\002\000\004\051\247\001\002\000\046\004" +
    "\uffbc\007\uffbc\010\uffbc\014\uffbc\023\uffbc\030\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000\004" +
    "\052\246\001\002\000\036\012\055\013\044\016\061\017" +
    "\056\020\060\021\041\024\043\026\040\027\046\031\063" +
    "\037\054\050\051\051\042\053\050\001\002\000\046\004" +
    "\uffb3\007\uffb3\010\uffb3\014\uffb3\023\uffb3\030\uffb3\032\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\036" +
    "\012\055\013\044\016\061\017\056\020\060\021\041\024" +
    "\043\026\040\027\046\031\063\037\054\050\051\051\042" +
    "\053\050\001\002\000\004\032\065\001\002\000\046\004" +
    "\uffbb\007\uffbb\010\uffbb\014\uffbb\023\uffbb\030\uffbb\032\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\001\002\000\046" +
    "\004\uffdd\007\uffdd\010\uffdd\014\uffdd\023\uffdd\030\uffdd\032" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\120\043\124\044\uffdd\045\uffdd\046\uffdd\001\002\000" +
    "\044\004\uffca\007\uffca\014\uffca\023\uffca\030\uffca\032\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\073\043\076\044\uffca\045\uffca\046\uffca\001\002\000\020" +
    "\013\111\016\105\017\103\021\104\026\110\037\106\051" +
    "\107\001\002\000\020\013\111\016\105\017\103\021\104" +
    "\026\110\037\106\051\107\001\002\000\020\013\111\016" +
    "\105\017\103\021\104\026\110\037\106\051\107\001\002" +
    "\000\020\013\111\016\105\017\103\021\104\026\110\037" +
    "\106\051\107\001\002\000\020\013\111\016\105\017\103" +
    "\021\104\026\110\037\106\051\107\001\002\000\020\013" +
    "\111\016\105\017\103\021\104\026\110\037\106\051\107" +
    "\001\002\000\004\051\234\001\002\000\020\013\111\016" +
    "\105\017\103\021\104\026\110\037\106\051\107\001\002" +
    "\000\020\013\111\016\105\017\103\021\104\026\110\037" +
    "\106\051\107\001\002\000\020\013\111\016\105\017\103" +
    "\021\104\026\110\037\106\051\107\001\002\000\036\004" +
    "\uffc6\007\uffc6\014\uffc6\023\uffc6\030\uffc6\032\uffc6\034\uffc6" +
    "\035\uffc6\036\075\037\070\040\100\041\077\042\073\043" +
    "\076\001\002\000\004\051\221\001\002\000\020\013\111" +
    "\016\105\017\103\021\104\026\110\037\106\051\107\001" +
    "\002\000\020\013\111\016\105\017\103\021\104\026\110" +
    "\037\106\051\107\001\002\000\020\013\111\016\105\017" +
    "\103\021\104\026\110\037\106\051\107\001\002\000\004" +
    "\047\215\001\002\000\020\013\111\016\105\017\103\021" +
    "\104\026\110\037\106\051\107\001\002\000\036\012\055" +
    "\013\044\016\061\017\056\020\060\021\041\024\043\026" +
    "\040\027\046\031\063\037\054\050\051\051\042\053\050" +
    "\001\002\000\004\023\113\001\002\000\036\012\055\013" +
    "\044\016\061\017\056\020\060\021\041\024\043\026\040" +
    "\027\046\031\063\037\054\050\051\051\042\053\050\001" +
    "\002\000\044\004\uffd2\007\uffd2\014\uffd2\023\uffd2\030\uffd2" +
    "\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\001\002" +
    "\000\046\004\117\007\uffe7\010\126\014\uffe7\023\uffe7\030" +
    "\uffe7\032\uffe7\034\uffe7\035\uffe7\036\123\037\116\040\127" +
    "\041\125\042\120\043\124\044\122\045\121\046\130\001" +
    "\002\000\036\012\055\013\134\016\140\017\137\020\060" +
    "\021\132\024\043\026\131\027\046\031\063\037\136\050" +
    "\051\051\133\053\050\001\002\000\036\012\055\013\134" +
    "\016\140\017\137\020\060\021\132\024\043\026\131\027" +
    "\046\031\063\037\136\050\051\051\133\053\050\001\002" +
    "\000\036\012\055\013\134\016\140\017\137\020\060\021" +
    "\132\024\043\026\131\027\046\031\063\037\136\050\051" +
    "\051\133\053\050\001\002\000\036\012\055\013\134\016" +
    "\140\017\137\020\060\021\132\024\043\026\131\027\046" +
    "\031\063\037\136\050\051\051\133\053\050\001\002\000" +
    "\036\012\055\013\134\016\140\017\137\020\060\021\132" +
    "\024\043\026\131\027\046\031\063\037\136\050\051\051" +
    "\133\053\050\001\002\000\036\012\055\013\134\016\140" +
    "\017\137\020\060\021\132\024\043\026\131\027\046\031" +
    "\063\037\136\050\051\051\133\053\050\001\002\000\004" +
    "\051\200\001\002\000\036\012\055\013\134\016\140\017" +
    "\137\020\060\021\132\024\043\026\131\027\046\031\063" +
    "\037\136\050\051\051\133\053\050\001\002\000\020\013" +
    "\111\016\105\017\103\021\104\026\110\037\106\051\107" +
    "\001\002\000\036\012\055\013\134\016\140\017\137\020" +
    "\060\021\132\024\043\026\131\027\046\031\063\037\136" +
    "\050\051\051\133\053\050\001\002\000\036\012\055\013" +
    "\134\016\140\017\137\020\060\021\132\024\043\026\131" +
    "\027\046\031\063\037\136\050\051\051\133\053\050\001" +
    "\002\000\036\012\055\013\134\016\140\017\137\020\060" +
    "\021\132\024\043\026\131\027\046\031\063\037\136\050" +
    "\051\051\133\053\050\001\002\000\036\012\055\013\134" +
    "\016\140\017\137\020\060\021\132\024\043\026\131\027" +
    "\046\031\063\037\136\050\051\051\133\053\050\001\002" +
    "\000\052\004\uffbd\007\uffbd\010\uffbd\014\uffbd\023\uffbd\030" +
    "\uffbd\031\160\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\161\001\002\000\036\012\055\013\044\016\061" +
    "\017\056\020\060\021\041\024\043\026\040\027\046\031" +
    "\063\037\054\050\051\051\042\053\050\001\002\000\040" +
    "\004\uffd9\007\uffd9\010\uffd9\014\uffd9\023\uffd9\030\uffd9\032" +
    "\uffd9\034\uffd9\035\uffd9\036\123\037\116\040\127\041\125" +
    "\042\120\043\124\001\002\000\036\012\055\013\134\016" +
    "\140\017\137\020\060\021\132\024\043\026\131\027\046" +
    "\031\063\037\136\050\051\051\133\053\050\001\002\000" +
    "\004\051\141\001\002\000\036\012\055\013\134\016\140" +
    "\017\137\020\060\021\132\024\043\026\131\027\046\031" +
    "\063\037\136\050\051\051\133\053\050\001\002\000\004" +
    "\033\142\001\002\000\014\005\033\015\032\022\030\025" +
    "\027\052\034\001\002\000\006\014\144\047\145\001\002" +
    "\000\036\012\055\013\134\016\140\017\137\020\060\021" +
    "\132\024\043\026\131\027\046\031\063\037\136\050\051" +
    "\051\133\053\050\001\002\000\036\012\055\013\134\016" +
    "\140\017\137\020\060\021\132\024\043\026\131\027\046" +
    "\031\063\037\136\050\051\051\133\053\050\001\002\000" +
    "\030\004\117\014\147\036\123\037\116\040\127\041\125" +
    "\042\120\043\124\044\122\045\121\046\130\001\002\000" +
    "\036\012\055\013\134\016\140\017\137\020\060\021\132" +
    "\024\043\026\131\027\046\031\063\037\136\050\051\051" +
    "\133\053\050\001\002\000\046\004\117\007\uffe1\010\uffe1" +
    "\014\uffe1\023\uffe1\030\uffe1\032\uffe1\034\uffe1\035\uffe1\036" +
    "\123\037\116\040\127\041\125\042\120\043\124\044\122" +
    "\045\121\046\130\001\002\000\046\004\117\007\uffe2\010" +
    "\uffe2\014\uffe2\023\uffe2\030\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\036\123\037\116\040\127\041\125\042\120\043\124\044" +
    "\122\045\121\046\130\001\002\000\046\004\uffde\007\uffde" +
    "\010\uffde\014\uffde\023\uffde\030\uffde\032\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\120\043\124" +
    "\044\uffde\045\uffde\046\uffde\001\002\000\004\023\154\001" +
    "\002\000\036\012\055\013\134\016\140\017\137\020\060" +
    "\021\132\024\043\026\131\027\046\031\063\037\136\050" +
    "\051\051\133\053\050\001\002\000\030\004\117\010\156" +
    "\036\123\037\116\040\127\041\125\042\120\043\124\044" +
    "\122\045\121\046\130\001\002\000\036\012\055\013\134" +
    "\016\140\017\137\020\060\021\132\024\043\026\131\027" +
    "\046\031\063\037\136\050\051\051\133\053\050\001\002" +
    "\000\046\004\117\007\uffe5\010\uffe5\014\uffe5\023\uffe5\030" +
    "\uffe5\032\uffe5\034\uffe5\035\uffe5\036\123\037\116\040\127" +
    "\041\125\042\120\043\124\044\122\045\121\046\130\001" +
    "\002\000\040\012\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\024\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\037" +
    "\uffb0\050\uffb0\051\uffb0\053\uffb0\001\002\000\036\012\055" +
    "\013\134\016\140\017\137\020\060\021\132\024\043\026" +
    "\131\027\046\031\063\037\136\050\051\051\133\053\050" +
    "\001\002\000\046\004\117\007\uffe0\010\uffe0\014\uffe0\023" +
    "\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0\036\123\037\116" +
    "\040\127\041\125\042\120\043\124\044\122\045\121\046" +
    "\130\001\002\000\004\032\170\001\002\000\036\012\055" +
    "\013\044\016\061\017\056\020\060\021\041\024\043\026" +
    "\040\027\046\031\063\037\054\050\051\051\042\053\050" +
    "\001\002\000\040\012\uffb6\013\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\024\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb8" +
    "\037\uffb6\050\uffb6\051\uffb6\053\uffb6\001\002\000\006\032" +
    "\uffb9\035\167\001\002\000\036\012\uffb7\013\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\024\uffb7\026\uffb7\027\uffb7\031" +
    "\uffb7\037\uffb7\050\uffb7\051\uffb7\053\uffb7\001\002\000\046" +
    "\004\uffbf\007\uffbf\010\uffbf\014\uffbf\023\uffbf\030\uffbf\032" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002\000" +
    "\046\004\uffdf\007\uffdf\010\uffdf\014\uffdf\023\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\036\123\037\116\040\127\041" +
    "\125\042\120\043\124\044\122\045\121\046\130\001\002" +
    "\000\030\004\117\007\173\036\123\037\116\040\127\041" +
    "\125\042\120\043\124\044\122\045\121\046\130\001\002" +
    "\000\036\012\055\013\134\016\140\017\137\020\060\021" +
    "\132\024\043\026\131\027\046\031\063\037\136\050\051" +
    "\051\133\053\050\001\002\000\046\004\117\007\uffe3\010" +
    "\uffe3\014\uffe3\023\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3" +
    "\036\123\037\116\040\127\041\125\042\120\043\124\044" +
    "\122\045\121\046\130\001\002\000\046\004\uffd6\007\uffd6" +
    "\010\uffd6\014\uffd6\023\uffd6\030\uffd6\032\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\120\043\124" +
    "\044\uffd6\045\uffd6\046\uffd6\001\002\000\044\004\071\007" +
    "\uffd1\014\uffd1\023\uffd1\030\uffd1\032\uffd1\034\uffd1\035\uffd1" +
    "\036\075\037\070\040\100\041\077\042\073\043\076\044" +
    "\074\045\072\046\101\001\002\000\046\004\uffd5\007\uffd5" +
    "\010\uffd5\014\uffd5\023\uffd5\030\uffd5\032\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\120\043\124" +
    "\044\uffd5\045\uffd5\046\uffd5\001\002\000\004\031\201\001" +
    "\002\000\040\012\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\024\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\037" +
    "\uffb0\050\uffb0\051\uffb0\053\uffb0\001\002\000\004\032\203" +
    "\001\002\000\046\004\uffd3\007\uffd3\010\uffd3\014\uffd3\023" +
    "\uffd3\030\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\001\002\000\046\004\uffd8\007\uffd8\010\uffd8\014\uffd8" +
    "\023\uffd8\030\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\127\041\125\042\120\043\124\044\uffd8\045\uffd8" +
    "\046\uffd8\001\002\000\040\004\uffdb\007\uffdb\010\uffdb\014" +
    "\uffdb\023\uffdb\030\uffdb\032\uffdb\034\uffdb\035\uffdb\036\123" +
    "\037\116\040\127\041\125\042\120\043\124\001\002\000" +
    "\040\004\uffda\007\uffda\010\uffda\014\uffda\023\uffda\030\uffda" +
    "\032\uffda\034\uffda\035\uffda\036\123\037\116\040\127\041" +
    "\125\042\120\043\124\001\002\000\046\004\uffd4\007\uffd4" +
    "\010\uffd4\014\uffd4\023\uffd4\030\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\120\043\124" +
    "\044\uffd4\045\uffd4\046\uffd4\001\002\000\046\004\uffdc\007" +
    "\uffdc\010\uffdc\014\uffdc\023\uffdc\030\uffdc\032\uffdc\034\uffdc" +
    "\035\uffdc\036\123\037\116\040\127\041\125\042\120\043" +
    "\124\044\122\045\121\046\130\001\002\000\046\004\uffd7" +
    "\007\uffd7\010\uffd7\014\uffd7\023\uffd7\030\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\127\041\125\042\120" +
    "\043\124\044\uffd7\045\uffd7\046\uffd7\001\002\000\030\004" +
    "\071\007\213\036\075\037\070\040\100\041\077\042\073" +
    "\043\076\044\074\045\072\046\101\001\002\000\020\013" +
    "\111\016\105\017\103\021\104\026\110\037\106\051\107" +
    "\001\002\000\044\004\071\007\uffd0\014\uffd0\023\uffd0\030" +
    "\uffd0\032\uffd0\034\uffd0\035\uffd0\036\075\037\070\040\100" +
    "\041\077\042\073\043\076\044\074\045\072\046\101\001" +
    "\002\000\020\013\111\016\105\017\103\021\104\026\110" +
    "\037\106\051\107\001\002\000\044\004\071\007\uffcd\014" +
    "\uffcd\023\uffcd\030\uffcd\032\uffcd\034\uffcd\035\uffcd\036\075" +
    "\037\070\040\100\041\077\042\073\043\076\044\074\045" +
    "\072\046\101\001\002\000\044\004\uffcb\007\uffcb\014\uffcb" +
    "\023\uffcb\030\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\100\041\077\042\073\043\076\044\uffcb\045\uffcb" +
    "\046\uffcb\001\002\000\044\004\uffcc\007\uffcc\014\uffcc\023" +
    "\uffcc\030\uffcc\032\uffcc\034\uffcc\035\uffcc\036\075\037\070" +
    "\040\100\041\077\042\073\043\076\044\074\045\072\046" +
    "\101\001\002\000\004\033\222\001\002\000\014\005\033" +
    "\015\032\022\030\025\027\052\034\001\002\000\006\014" +
    "\224\047\225\001\002\000\020\013\111\016\105\017\103" +
    "\021\104\026\110\037\106\051\107\001\002\000\020\013" +
    "\111\016\105\017\103\021\104\026\110\037\106\051\107" +
    "\001\002\000\030\004\071\014\227\036\075\037\070\040" +
    "\100\041\077\042\073\043\076\044\074\045\072\046\101" +
    "\001\002\000\020\013\111\016\105\017\103\021\104\026" +
    "\110\037\106\051\107\001\002\000\044\004\071\007\uffce" +
    "\014\uffce\023\uffce\030\uffce\032\uffce\034\uffce\035\uffce\036" +
    "\075\037\070\040\100\041\077\042\073\043\076\044\074" +
    "\045\072\046\101\001\002\000\044\004\071\007\uffcf\014" +
    "\uffcf\023\uffcf\030\uffcf\032\uffcf\034\uffcf\035\uffcf\036\075" +
    "\037\070\040\100\041\077\042\073\043\076\044\074\045" +
    "\072\046\101\001\002\000\044\004\uffc3\007\uffc3\014\uffc3" +
    "\023\uffc3\030\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\073\043\076\044\uffc3\045\uffc3" +
    "\046\uffc3\001\002\000\044\004\uffc2\007\uffc2\014\uffc2\023" +
    "\uffc2\030\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\073\043\076\044\uffc2\045\uffc2\046" +
    "\uffc2\001\002\000\004\031\235\001\002\000\040\012\uffb0" +
    "\013\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\026" +
    "\uffb0\027\uffb0\031\uffb0\032\uffb0\037\uffb0\050\uffb0\051\uffb0" +
    "\053\uffb0\001\002\000\004\032\237\001\002\000\044\004" +
    "\uffc0\007\uffc0\014\uffc0\023\uffc0\030\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\001\002\000\044\004\uffc5" +
    "\007\uffc5\014\uffc5\023\uffc5\030\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\100\041\077\042\073\043\076" +
    "\044\uffc5\045\uffc5\046\uffc5\001\002\000\036\004\uffc8\007" +
    "\uffc8\014\uffc8\023\uffc8\030\uffc8\032\uffc8\034\uffc8\035\uffc8" +
    "\036\075\037\070\040\100\041\077\042\073\043\076\001" +
    "\002\000\044\004\uffc1\007\uffc1\014\uffc1\023\uffc1\030\uffc1" +
    "\032\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\073\043\076\044\uffc1\045\uffc1\046\uffc1\001\002" +
    "\000\036\004\uffc7\007\uffc7\014\uffc7\023\uffc7\030\uffc7\032" +
    "\uffc7\034\uffc7\035\uffc7\036\075\037\070\040\100\041\077" +
    "\042\073\043\076\001\002\000\044\004\uffc9\007\uffc9\014" +
    "\uffc9\023\uffc9\030\uffc9\032\uffc9\034\uffc9\035\uffc9\036\075" +
    "\037\070\040\100\041\077\042\073\043\076\044\074\045" +
    "\072\046\101\001\002\000\044\004\uffc4\007\uffc4\014\uffc4" +
    "\023\uffc4\030\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\100\041\077\042\073\043\076\044\uffc4\045\uffc4" +
    "\046\uffc4\001\002\000\046\004\uffbe\007\uffbe\010\uffbe\014" +
    "\uffbe\023\uffbe\030\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\001\002\000\004\033\250\001\002\000\014" +
    "\005\033\015\032\022\030\025\027\052\034\001\002\000" +
    "\006\014\252\047\253\001\002\000\036\012\055\013\044" +
    "\016\061\017\056\020\060\021\041\024\043\026\040\027" +
    "\046\031\063\037\054\050\051\051\042\053\050\001\002" +
    "\000\036\012\055\013\044\016\061\017\056\020\060\021" +
    "\041\024\043\026\040\027\046\031\063\037\054\050\051" +
    "\051\042\053\050\001\002\000\036\012\055\013\044\016" +
    "\061\017\056\020\060\021\041\024\043\026\040\027\046" +
    "\031\063\037\054\050\051\051\042\053\050\001\002\000" +
    "\036\012\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\024\uffe8\026\uffe8\027\uffe8\031\uffe8\037\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\001\002\000\006\030\260\034\257\001\002" +
    "\000\036\012\uffe9\013\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\024\uffe9\026\uffe9\027\uffe9\031\uffe9\037\uffe9\050\uffe9" +
    "\051\uffe9\053\uffe9\001\002\000\050\004\uffea\007\uffea\010" +
    "\uffea\014\uffea\023\uffea\030\uffea\032\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\051\uffea\001\002\000\004\023\262" +
    "\001\002\000\036\012\055\013\044\016\061\017\056\020" +
    "\060\021\041\024\043\026\040\027\046\031\063\037\054" +
    "\050\051\051\042\053\050\001\002\000\046\004\117\007" +
    "\uffe7\010\264\014\uffe7\023\uffe7\030\uffe7\032\uffe7\034\uffe7" +
    "\035\uffe7\036\123\037\116\040\127\041\125\042\120\043" +
    "\124\044\122\045\121\046\130\001\002\000\036\012\055" +
    "\013\044\016\061\017\056\020\060\021\041\024\043\026" +
    "\040\027\046\031\063\037\054\050\051\051\042\053\050" +
    "\001\002\000\036\012\055\013\044\016\061\017\056\020" +
    "\060\021\041\024\043\026\040\027\046\031\063\037\054" +
    "\050\051\051\042\053\050\001\002\000\006\030\ufff6\051" +
    "\ufff6\001\002\000\004\051\277\001\002\000\004\032\272" +
    "\001\002\000\006\032\uffee\051\uffec\001\002\000\004\033" +
    "\273\001\002\000\014\005\033\015\032\022\030\025\027" +
    "\052\034\001\002\000\004\027\046\001\002\000\006\030" +
    "\ufff5\051\ufff5\001\002\000\006\032\uffef\035\302\001\002" +
    "\000\004\033\300\001\002\000\014\005\033\015\032\022" +
    "\030\025\027\052\034\001\002\000\006\032\uffeb\035\uffeb" +
    "\001\002\000\004\051\uffed\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\002\003\003\005\027\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\013\001" +
    "\001\000\006\006\016\027\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\015\001\001\000\002\001" +
    "\001\000\006\011\022\012\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\266\010\267\027\270\001\001" +
    "\000\004\013\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\044\017" +
    "\036\020\046\021\051\022\052\023\056\024\061\001\001" +
    "\000\002\001\001\000\016\015\044\020\171\021\211\022" +
    "\052\023\056\024\061\001\001\000\016\015\044\020\170" +
    "\021\217\022\052\023\056\024\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\044\017\260\020\046" +
    "\021\051\022\052\023\056\024\061\001\001\000\002\001" +
    "\001\000\006\016\253\027\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\044\020\151\021\216\022\052" +
    "\023\056\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\044" +
    "\020\065\021\066\022\052\023\056\024\061\001\001\000" +
    "\002\001\001\000\020\015\044\017\063\020\046\021\051" +
    "\022\052\023\056\024\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\244\001\001\000\004\021\243\001\001\000\004\021" +
    "\242\001\001\000\004\021\241\001\001\000\004\021\240" +
    "\001\001\000\004\021\237\001\001\000\002\001\001\000" +
    "\004\021\232\001\001\000\004\021\231\001\001\000\004" +
    "\021\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\217\001\001\000\004\021\066\001\001\000\004" +
    "\021\216\001\001\000\002\001\001\000\004\021\211\001" +
    "\001\000\020\015\044\017\111\020\046\021\051\022\052" +
    "\023\056\024\061\001\001\000\002\001\001\000\020\015" +
    "\044\017\113\020\114\021\051\022\052\023\056\024\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\044\020\210\022\052\023\056\024\061\001\001\000\014" +
    "\015\044\020\207\022\052\023\056\024\061\001\001\000" +
    "\014\015\044\020\206\022\052\023\056\024\061\001\001" +
    "\000\014\015\044\020\205\022\052\023\056\024\061\001" +
    "\001\000\014\015\044\020\204\022\052\023\056\024\061" +
    "\001\001\000\014\015\044\020\203\022\052\023\056\024" +
    "\061\001\001\000\002\001\001\000\014\015\044\020\176" +
    "\022\052\023\056\024\061\001\001\000\004\021\175\001" +
    "\001\000\014\015\044\020\174\022\052\023\056\024\061" +
    "\001\001\000\014\015\044\020\134\022\052\023\056\024" +
    "\061\001\001\000\014\015\044\020\171\022\052\023\056" +
    "\024\061\001\001\000\014\015\044\020\170\022\052\023" +
    "\056\024\061\001\001\000\002\001\001\000\020\015\044" +
    "\017\152\020\046\021\051\022\052\023\056\024\061\001" +
    "\001\000\002\001\001\000\014\015\044\020\151\022\052" +
    "\023\056\024\061\001\001\000\002\001\001\000\014\015" +
    "\044\020\065\022\052\023\056\024\061\001\001\000\002" +
    "\001\001\000\004\013\142\001\001\000\002\001\001\000" +
    "\014\015\044\020\150\022\052\023\056\024\061\001\001" +
    "\000\014\015\044\020\145\022\052\023\056\024\061\001" +
    "\001\000\002\001\001\000\014\015\044\020\147\022\052" +
    "\023\056\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\044" +
    "\020\154\022\052\023\056\024\061\001\001\000\002\001" +
    "\001\000\014\015\044\020\156\022\052\023\056\024\061" +
    "\001\001\000\002\001\001\000\010\025\162\026\163\027" +
    "\164\001\001\000\014\015\044\020\161\022\052\023\056" +
    "\024\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\044\017\165\020\046\021\051\022\052\023\056" +
    "\024\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\044\020\173\022\052\023\056\024" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\201\026\163\027\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\213\001\001\000\002\001" +
    "\001\000\004\021\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\222\001\001\000\002\001\001\000\004\021\230\001\001" +
    "\000\004\021\225\001\001\000\002\001\001\000\004\021" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\235\026\163\027\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\250\001" +
    "\001\000\002\001\001\000\016\015\044\020\150\021\230" +
    "\022\052\023\056\024\061\001\001\000\016\015\044\020" +
    "\145\021\225\022\052\023\056\024\061\001\001\000\020" +
    "\015\044\017\255\020\046\021\051\022\052\023\056\024" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\044\017\113\020\262\021\051\022\052\023\056\024\061" +
    "\001\001\000\002\001\001\000\016\015\044\020\156\021" +
    "\175\022\052\023\056\024\061\001\001\000\016\015\044" +
    "\020\161\021\215\022\052\023\056\024\061\001\001\000" +
    "\002\001\001\000\004\014\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\273\001" +
    "\001\000\004\015\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    ComplexSymbolFactory sf;
    ASTNode abstractTree;

    public void init(Scanner s, ComplexSymbolFactory sf){ this.s=s; this.sf = sf;}

    public ASTNode getTree(){return abstractTree;}

    public void report_error(String message, Object info) {
        if (info instanceof ComplexSymbolFactory.ComplexSymbol) {

          ComplexSymbolFactory.ComplexSymbol s = (ComplexSymbolFactory.ComplexSymbol)info;

          //Return previous token if current has no indication of location. Should only happens on EOF.
          if(s.xleft == null || s.xright == null){
              s = ((VSOPScanner)this.s).getPrev();
          }
          List expected = expected_token_ids();

          throw new ParserError(s, expected, s.xleft.getLine(), s.xleft.getColumn());

          //throw new ParserError(s.xleft.getLine(), s.xleft.getColumn());
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPParser$actions {
  private final VSOPParser parser;

  /** Constructor */
  CUP$VSOPParser$actions(VSOPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action_part00000000(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassList start_val = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPParser$parser.done_parsing();
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classList 
            {
              ClassList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 abstractTree = cl; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classList ::= classList classItem 
            {
              ClassList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassItem ci = (ClassItem)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassList(cl, ci); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classList ::= empty 
            {
              ClassList RESULT =null;
		 RESULT = new ClassList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classItem ::= CLASS TYPE_IDENTIFIER classBody 
            {
              ClassItem RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassItem(ti.getValue(), cel); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classItem",2, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classItem ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER classBody 
            {
              ClassItem RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int ti_parentleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int ti_parentright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token ti_parent = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassItem(ti.getValue(), ti_parent.getValue(), cel); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classItem",2, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classBody ::= LBRACE classElementList RBRACE 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = cel; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classBody",3, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classElementList ::= classElementList field 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassElementList(cel, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classElementList ::= classElementList method 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassElementList(cel, m); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classElementList ::= empty 
            {
              ClassElementList RESULT =null;
		 RESULT = new ClassElementList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field ::= IDENTIFIER COLON type SEMICOLON 
            {
              Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Field(id.getValue(), ty); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("field",7, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= IDENTIFIER COLON type ASSIGN expr SEMICOLON 
            {
              Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Field(id.getValue(), ty, val); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("field",7, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= IDENTIFIER LPAR formals RPAR COLON type block 
            {
              Method RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).value;
		int foleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		FormalList fo = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ExprList b = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Method(id.getValue(), fo, ty, b); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= TYPE_IDENTIFIER 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type(ti.getValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= INT32 
            {
              Type RESULT =null;
		 RESULT = new Type("int32"); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("string"); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= UNIT 
            {
              Type RESULT =null;
		 RESULT = new Type("unit"); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= formalList formal 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new FormalList(fl, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= empty 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalList ::= formalList formal COMMA 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new FormalList(fl, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formalList",5, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalList ::= empty 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formalList",5, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal ::= IDENTIFIER COLON type 
            {
              Formal RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Formal(id.getValue(), ty); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= LBRACE exprList expr RBRACE 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ExprList(el, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exprList ::= exprList expr SEMICOLON 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ExprList(el, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("exprList",12, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exprList ::= empty 
            {
              ExprList RESULT =null;
		 RESULT = new ExprList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("exprList",12, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= matched 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = m; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= unmatched 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = u; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // matched ::= IF expr THEN matched ELSE matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new If(e1, e2, e3); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matched ::= simpleExpr 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr n = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = n; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // matched ::= WHILE matched DO matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new While(e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // matched ::= LET IDENTIFIER COLON type IN matched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id.getValue(), ty, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // matched ::= LET IDENTIFIER COLON type ASSIGN matched IN matched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id.getValue(), ty, e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // matched ::= IDENTIFIER ASSIGN matched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Assign(id.getValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // matched ::= NOT matched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // matched ::= MINUS matched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // matched ::= ISNULL matched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // matched ::= matched AND matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // matched ::= matched EQUAL matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // matched ::= matched LOWER matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // matched ::= matched LOWER_EQUAL matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // matched ::= matched PLUS matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // matched ::= matched MINUS matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // matched ::= matched TIMES matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // matched ::= matched DIV matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // matched ::= matched POW matched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // matched ::= matched DOT IDENTIFIER LPAR args RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList ar = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Call(e, id.getValue(), ar); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("matched",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unmatched ::= IF expr THEN expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new If(e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unmatched ::= IF expr THEN matched ELSE unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new If(e1, e2, e3); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unmatched ::= WHILE unmatched DO unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new While(e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unmatched ::= LET IDENTIFIER COLON type IN unmatched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id.getValue(), ty, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unmatched ::= LET IDENTIFIER COLON type ASSIGN unmatched IN unmatched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id.getValue(), ty, e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unmatched ::= IDENTIFIER ASSIGN unmatched 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Assign(id.getValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unmatched ::= NOT unmatched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unmatched ::= MINUS unmatched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unmatched ::= ISNULL unmatched 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unmatched ::= unmatched AND unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unmatched ::= unmatched EQUAL unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unmatched ::= unmatched LOWER unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unmatched ::= unmatched LOWER_EQUAL unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unmatched ::= unmatched PLUS unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unmatched ::= unmatched MINUS unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unmatched ::= unmatched TIMES unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unmatched ::= unmatched DIV unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unmatched ::= unmatched POW unmatched 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unmatched ::= unmatched DOT IDENTIFIER LPAR args RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList ar = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Call(e, id.getValue(), ar); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("unmatched",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simpleExpr ::= IDENTIFIER LPAR args RPAR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList ar = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Call(new Id("self"), id.getValue(), ar); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simpleExpr ::= NEW TYPE_IDENTIFIER 
            {
              Expr RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new New(ti.getValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simpleExpr ::= IDENTIFIER 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Id(id.getValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simpleExpr ::= literal 
            {
              Expr RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr li = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = li; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simpleExpr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simpleExpr ::= block 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ExprList b = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("simpleExpr",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // args ::= argList expr 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ArgList(al, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("args",19, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // args ::= empty 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("args",19, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argList ::= argList expr COMMA 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ArgList(al, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("argList",20, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argList ::= empty 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("argList",20, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= INT_LITERAL 
            {
              Expr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token il = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralInteger(il.getValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token sl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralString(sl.getValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= booleanLiteral 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr bl = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = bl; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // booleanLiteral ::= TRUE 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralBoolean(bl.getTokenType().getStringValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",18, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // booleanLiteral ::= FALSE 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralBoolean(bl.getTokenType().getStringValue()); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",18, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // empty ::= 
            {
              Object RESULT =null;

              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("empty",21, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPParser$do_action_part00000000(
                               CUP$VSOPParser$act_num,
                               CUP$VSOPParser$parser,
                               CUP$VSOPParser$stack,
                               CUP$VSOPParser$top);
    }
}

}
