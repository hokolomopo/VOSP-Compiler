
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import tokens.Token;
import lexer.VSOPLexer;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\005\007\042\005\056\004\001\002\000" +
    "\014\006\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9\001\002" +
    "\000\010\005\007\042\005\056\004\001\002\000\012\002" +
    "\023\005\007\042\005\056\004\001\002\000\010\005\007" +
    "\042\005\056\004\001\002\000\012\037\011\041\012\042" +
    "\013\043\014\001\002\000\012\002\uffff\005\uffff\042\uffff" +
    "\056\uffff\001\002\000\010\005\007\042\005\056\004\001" +
    "\002\000\010\005\007\042\005\056\004\001\002\000\010" +
    "\005\007\042\005\056\004\001\002\000\014\006\ufffc\037" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\014\006\ufffd" +
    "\037\ufffd\041\ufffd\042\ufffd\043\014\001\002\000\014\006" +
    "\ufffe\037\ufffe\041\ufffe\042\ufffe\043\014\001\002\000\012" +
    "\006\021\041\012\042\013\043\014\001\002\000\014\006" +
    "\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa\001\002\000\012" +
    "\037\024\041\012\042\013\043\014\001\002\000\004\002" +
    "\000\001\002\000\012\002\001\005\001\042\001\056\001" +
    "\001\002\000\014\006\ufffb\037\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\002\005\003\007\001\001\000\002\001" +
    "\001\000\004\003\024\001\001\000\004\003\021\001\001" +
    "\000\004\003\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\016\001\001\000\004\003\015\001\001" +
    "\000\004\003\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    ComplexSymbolFactory sf;
    public void init(Scanner s, ComplexSymbolFactory sf){ this.s=s; this.sf = sf;}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPParser$actions {
  private final VSOPParser parser;

  /** Constructor */
  CUP$VSOPParser$actions(VSOPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action_part00000000(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 System.out.println(e);
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPParser$parser.done_parsing();
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 System.out.println(e);
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = e1+e2;       
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = e1-e2;       
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = e1*e2;       
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= MINUS expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = -e;          
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = e;           
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= INT_LITERAL 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = Integer.parseInt(n);           
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPParser$do_action_part00000000(
                               CUP$VSOPParser$act_num,
                               CUP$VSOPParser$parser,
                               CUP$VSOPParser$stack,
                               CUP$VSOPParser$top);
    }
}

}
