
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package be.vsop.parser;

import java_cup.runtime.*;
import be.vsop.tokens.Token;
import be.vsop.lexer.VSOPLexer;
import java_cup.runtime.ComplexSymbolFactory.Location;
import be.vsop.AST.*;
import be.vsop.exceptions.ParserException;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\011\006\000\002\011\010\000\002" +
    "\012\011\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\010\004\000\002\010\003\000\002\007\005\000" +
    "\002\007\003\000\002\015\005\000\002\016\006\000\002" +
    "\017\005\000\002\017\003\000\002\020\006\000\002\020" +
    "\010\000\002\020\006\000\002\020\010\000\002\020\012" +
    "\000\002\020\005\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\010\000\002\020\006\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\020\003\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\025\003\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\006\005\001\002\000\004\002\175\001" +
    "\002\000\004\052\012\001\002\000\006\002\ufffe\006\ufffe" +
    "\001\002\000\006\002\000\006\005\001\002\000\006\002" +
    "\uffff\006\uffff\001\002\000\006\011\014\027\013\001\002" +
    "\000\054\004\uffef\007\uffef\010\uffef\011\uffef\014\uffef\023" +
    "\uffef\027\uffef\030\uffef\032\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\001\002\000\006\030\uffc2\051\uffc2" +
    "\001\002\000\004\052\012\001\002\000\006\002\ufffd\006" +
    "\ufffd\001\002\000\004\027\013\001\002\000\006\002\ufffc" +
    "\006\ufffc\001\002\000\006\030\023\051\024\001\002\000" +
    "\006\030\ufff8\051\ufff8\001\002\000\006\031\027\033\030" +
    "\001\002\000\006\002\ufffb\006\ufffb\001\002\000\054\004" +
    "\uffc3\007\uffc3\010\uffc3\014\uffc3\023\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\001\002\000\006\030\ufffa\051\ufffa\001\002\000" +
    "\006\030\ufff9\051\ufff9\001\002\000\006\032\uffc2\051\uffc2" +
    "\001\002\000\014\005\035\015\034\022\032\025\031\052" +
    "\012\001\002\000\016\014\ufff0\027\ufff0\032\ufff0\034\ufff0" +
    "\035\ufff0\047\ufff0\001\002\000\016\014\ufff1\027\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\047\ufff1\001\002\000\006\034\037" +
    "\047\040\001\002\000\016\014\ufff3\027\ufff3\032\ufff3\034" +
    "\ufff3\035\ufff3\047\ufff3\001\002\000\016\014\ufff2\027\ufff2" +
    "\032\ufff2\034\ufff2\035\ufff2\047\ufff2\001\002\000\016\014" +
    "\ufff4\027\ufff4\032\ufff4\034\ufff4\035\ufff4\047\ufff4\001\002" +
    "\000\006\030\ufff7\051\ufff7\001\002\000\036\012\054\013" +
    "\046\016\060\017\055\020\057\021\044\024\045\026\043" +
    "\027\050\031\062\037\053\050\051\051\024\053\052\001" +
    "\002\000\030\004\066\034\160\036\072\037\065\040\075" +
    "\041\073\042\070\043\074\044\071\045\067\046\077\001" +
    "\002\000\052\004\uffd0\007\uffd0\010\uffd0\014\uffd0\023\uffd0" +
    "\030\uffd0\031\153\032\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\154\001\002\000\036\012\054\013\046\016" +
    "\060\017\055\020\057\021\044\024\045\026\043\027\050" +
    "\031\062\037\053\050\051\051\024\053\052\001\002\000" +
    "\036\012\054\013\046\016\060\017\055\020\057\021\044" +
    "\024\045\026\043\027\050\031\062\037\053\050\051\051" +
    "\024\053\052\001\002\000\046\004\uffc5\007\uffc5\010\uffc5" +
    "\014\uffc5\023\uffc5\030\uffc5\032\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\001\002\000\036\012\054\013\046\016" +
    "\060\017\055\020\057\021\044\024\045\026\043\027\050" +
    "\031\062\037\053\050\051\051\024\053\052\001\002\000" +
    "\046\004\uffcd\007\uffcd\010\uffcd\014\uffcd\023\uffcd\030\uffcd" +
    "\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002" +
    "\000\036\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\037\uffc2\050\uffc2" +
    "\051\uffc2\053\uffc2\001\002\000\046\004\uffc7\007\uffc7\010" +
    "\uffc7\014\uffc7\023\uffc7\030\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\001\002\000\046\004\uffc8\007\uffc8" +
    "\010\uffc8\014\uffc8\023\uffc8\030\uffc8\032\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\001\002\000\036\012\054\013" +
    "\046\016\060\017\055\020\057\021\044\024\045\026\043" +
    "\027\050\031\062\037\053\050\051\051\024\053\052\001" +
    "\002\000\046\004\uffc4\007\uffc4\010\uffc4\014\uffc4\023\uffc4" +
    "\030\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\001\002\000\004\051\024\001\002\000\046\004\uffcf\007" +
    "\uffcf\010\uffcf\014\uffcf\023\uffcf\030\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000\004\052\012" +
    "\001\002\000\036\012\054\013\046\016\060\017\055\020" +
    "\057\021\044\024\045\026\043\027\050\031\062\037\053" +
    "\050\051\051\024\053\052\001\002\000\046\004\uffc6\007" +
    "\uffc6\010\uffc6\014\uffc6\023\uffc6\030\uffc6\032\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000\040\012\054" +
    "\013\046\016\060\017\055\020\057\021\044\024\045\026" +
    "\043\027\050\031\062\032\064\037\053\050\051\051\024" +
    "\053\052\001\002\000\030\004\066\032\076\036\072\037" +
    "\065\040\075\041\073\042\070\043\074\044\071\045\067" +
    "\046\077\001\002\000\046\004\uffd2\007\uffd2\010\uffd2\014" +
    "\uffd2\023\uffd2\030\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\001\002\000\036\012\054\013\046\016\060" +
    "\017\055\020\057\021\044\024\045\026\043\027\050\031" +
    "\062\037\053\050\051\051\024\053\052\001\002\000\036" +
    "\012\054\013\046\016\060\017\055\020\057\021\044\024" +
    "\045\026\043\027\050\031\062\037\053\050\051\051\024" +
    "\053\052\001\002\000\036\012\054\013\046\016\060\017" +
    "\055\020\057\021\044\024\045\026\043\027\050\031\062" +
    "\037\053\050\051\051\024\053\052\001\002\000\036\012" +
    "\054\013\046\016\060\017\055\020\057\021\044\024\045" +
    "\026\043\027\050\031\062\037\053\050\051\051\024\053" +
    "\052\001\002\000\036\012\054\013\046\016\060\017\055" +
    "\020\057\021\044\024\045\026\043\027\050\031\062\037" +
    "\053\050\051\051\024\053\052\001\002\000\036\012\054" +
    "\013\046\016\060\017\055\020\057\021\044\024\045\026" +
    "\043\027\050\031\062\037\053\050\051\051\024\053\052" +
    "\001\002\000\036\012\054\013\046\016\060\017\055\020" +
    "\057\021\044\024\045\026\043\027\050\031\062\037\053" +
    "\050\051\051\024\053\052\001\002\000\004\051\024\001" +
    "\002\000\036\012\054\013\046\016\060\017\055\020\057" +
    "\021\044\024\045\026\043\027\050\031\062\037\053\050" +
    "\051\051\024\053\052\001\002\000\046\004\uffce\007\uffce" +
    "\010\uffce\014\uffce\023\uffce\030\uffce\032\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\001\002\000\036\012\054\013" +
    "\046\016\060\017\055\020\057\021\044\024\045\026\043" +
    "\027\050\031\062\037\053\050\051\051\024\053\052\001" +
    "\002\000\040\004\uffda\007\uffda\010\uffda\014\uffda\023\uffda" +
    "\030\uffda\032\uffda\034\uffda\035\uffda\036\072\037\065\040" +
    "\075\041\073\042\070\043\074\001\002\000\046\004\uffd7" +
    "\007\uffd7\010\uffd7\014\uffd7\023\uffd7\030\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\070" +
    "\043\074\044\uffd7\045\uffd7\046\uffd7\001\002\000\004\031" +
    "\103\001\002\000\040\012\uffc2\013\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\037\uffc2\050\uffc2\051\uffc2\053\uffc2\001\002\000\036" +
    "\012\054\013\046\016\060\017\055\020\057\021\044\024" +
    "\045\026\043\027\050\031\062\037\053\050\051\051\024" +
    "\053\052\001\002\000\004\032\107\001\002\000\040\012" +
    "\uffc9\013\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffcb\037\uffc9\050\uffc9\051" +
    "\uffc9\053\uffc9\001\002\000\046\004\uffd4\007\uffd4\010\uffd4" +
    "\014\uffd4\023\uffd4\030\uffd4\032\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\001\002\000\032\004\066\032\uffcc\035" +
    "\111\036\072\037\065\040\075\041\073\042\070\043\074" +
    "\044\071\045\067\046\077\001\002\000\036\012\uffca\013" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\024\uffca\026\uffca" +
    "\027\uffca\031\uffca\037\uffca\050\uffca\051\uffca\053\uffca\001" +
    "\002\000\046\004\uffd6\007\uffd6\010\uffd6\014\uffd6\023\uffd6" +
    "\030\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\070\043\074\044\uffd6\045\uffd6\046\uffd6" +
    "\001\002\000\046\004\uffd9\007\uffd9\010\uffd9\014\uffd9\023" +
    "\uffd9\030\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\075\041\073\042\070\043\074\044\uffd9\045\uffd9\046" +
    "\uffd9\001\002\000\040\004\uffdc\007\uffdc\010\uffdc\014\uffdc" +
    "\023\uffdc\030\uffdc\032\uffdc\034\uffdc\035\uffdc\036\072\037" +
    "\065\040\075\041\073\042\070\043\074\001\002\000\046" +
    "\004\uffd5\007\uffd5\010\uffd5\014\uffd5\023\uffd5\030\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\070\043\074\044\uffd5\045\uffd5\046\uffd5\001\002\000" +
    "\040\004\uffdb\007\uffdb\010\uffdb\014\uffdb\023\uffdb\030\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\036\072\037\065\040\075\041" +
    "\073\042\070\043\074\001\002\000\046\004\uffdd\007\uffdd" +
    "\010\uffdd\014\uffdd\023\uffdd\030\uffdd\032\uffdd\034\uffdd\035" +
    "\uffdd\036\072\037\065\040\075\041\073\042\070\043\074" +
    "\044\071\045\067\046\077\001\002\000\046\004\uffd8\007" +
    "\uffd8\010\uffd8\014\uffd8\023\uffd8\030\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\075\041\073\042\070\043" +
    "\074\044\uffd8\045\uffd8\046\uffd8\001\002\000\046\004\uffde" +
    "\007\uffde\010\uffde\014\uffde\023\uffde\030\uffde\032\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\070" +
    "\043\074\044\uffde\045\uffde\046\uffde\001\002\000\046\004" +
    "\uffd1\007\uffd1\010\uffd1\014\uffd1\023\uffd1\030\uffd1\032\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002\000\004" +
    "\033\124\001\002\000\014\005\035\015\034\022\032\025" +
    "\031\052\012\001\002\000\006\014\126\047\127\001\002" +
    "\000\036\012\054\013\046\016\060\017\055\020\057\021" +
    "\044\024\045\026\043\027\050\031\062\037\053\050\051" +
    "\051\024\053\052\001\002\000\036\012\054\013\046\016" +
    "\060\017\055\020\057\021\044\024\045\026\043\027\050" +
    "\031\062\037\053\050\051\051\024\053\052\001\002\000" +
    "\030\004\066\014\131\036\072\037\065\040\075\041\073" +
    "\042\070\043\074\044\071\045\067\046\077\001\002\000" +
    "\036\012\054\013\046\016\060\017\055\020\057\021\044" +
    "\024\045\026\043\027\050\031\062\037\053\050\051\051" +
    "\024\053\052\001\002\000\046\004\066\007\uffe2\010\uffe2" +
    "\014\uffe2\023\uffe2\030\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\072\037\065\040\075\041\073\042\070\043\074\044\071" +
    "\045\067\046\077\001\002\000\046\004\066\007\uffe3\010" +
    "\uffe3\014\uffe3\023\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3" +
    "\036\072\037\065\040\075\041\073\042\070\043\074\044" +
    "\071\045\067\046\077\001\002\000\046\004\uffdf\007\uffdf" +
    "\010\uffdf\014\uffdf\023\uffdf\030\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\070\043\074" +
    "\044\uffdf\045\uffdf\046\uffdf\001\002\000\036\012\054\013" +
    "\046\016\060\017\055\020\057\021\044\024\045\026\043" +
    "\027\050\031\062\037\053\050\051\051\024\053\052\001" +
    "\002\000\036\012\uffe7\013\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\024\uffe7\026\uffe7\027\uffe7\031\uffe7\037\uffe7\050" +
    "\uffe7\051\uffe7\053\uffe7\001\002\000\032\004\066\030\141" +
    "\034\140\036\072\037\065\040\075\041\073\042\070\043" +
    "\074\044\071\045\067\046\077\001\002\000\036\012\uffe8" +
    "\013\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\024\uffe8\026" +
    "\uffe8\027\uffe8\031\uffe8\037\uffe8\050\uffe8\051\uffe8\053\uffe8" +
    "\001\002\000\050\004\uffe9\007\uffe9\010\uffe9\014\uffe9\023" +
    "\uffe9\030\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\051\uffe9\001\002\000\030\004\066\023\143\036\072" +
    "\037\065\040\075\041\073\042\070\043\074\044\071\045" +
    "\067\046\077\001\002\000\036\012\054\013\046\016\060" +
    "\017\055\020\057\021\044\024\045\026\043\027\050\031" +
    "\062\037\053\050\051\051\024\053\052\001\002\000\046" +
    "\004\066\007\uffe6\010\145\014\uffe6\023\uffe6\030\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\072\037\065\040\075\041\073" +
    "\042\070\043\074\044\071\045\067\046\077\001\002\000" +
    "\036\012\054\013\046\016\060\017\055\020\057\021\044" +
    "\024\045\026\043\027\050\031\062\037\053\050\051\051" +
    "\024\053\052\001\002\000\046\004\066\007\uffe5\010\uffe5" +
    "\014\uffe5\023\uffe5\030\uffe5\032\uffe5\034\uffe5\035\uffe5\036" +
    "\072\037\065\040\075\041\073\042\070\043\074\044\071" +
    "\045\067\046\077\001\002\000\046\004\uffe0\007\uffe0\010" +
    "\uffe0\014\uffe0\023\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0" +
    "\036\072\037\065\040\075\041\073\042\070\043\074\044" +
    "\071\045\067\046\077\001\002\000\030\004\066\007\151" +
    "\036\072\037\065\040\075\041\073\042\070\043\074\044" +
    "\071\045\067\046\077\001\002\000\036\012\054\013\046" +
    "\016\060\017\055\020\057\021\044\024\045\026\043\027" +
    "\050\031\062\037\053\050\051\051\024\053\052\001\002" +
    "\000\046\004\066\007\uffe4\010\uffe4\014\uffe4\023\uffe4\030" +
    "\uffe4\032\uffe4\034\uffe4\035\uffe4\036\072\037\065\040\075" +
    "\041\073\042\070\043\074\044\071\045\067\046\077\001" +
    "\002\000\040\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\037" +
    "\uffc2\050\uffc2\051\uffc2\053\uffc2\001\002\000\036\012\054" +
    "\013\046\016\060\017\055\020\057\021\044\024\045\026" +
    "\043\027\050\031\062\037\053\050\051\051\024\053\052" +
    "\001\002\000\046\004\066\007\uffe1\010\uffe1\014\uffe1\023" +
    "\uffe1\030\uffe1\032\uffe1\034\uffe1\035\uffe1\036\072\037\065" +
    "\040\075\041\073\042\070\043\074\044\071\045\067\046" +
    "\077\001\002\000\004\032\157\001\002\000\046\004\uffd3" +
    "\007\uffd3\010\uffd3\014\uffd3\023\uffd3\030\uffd3\032\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\006\030" +
    "\ufff6\051\ufff6\001\002\000\004\051\024\001\002\000\004" +
    "\032\164\001\002\000\006\032\uffed\051\uffeb\001\002\000" +
    "\004\033\165\001\002\000\014\005\035\015\034\022\032" +
    "\025\031\052\012\001\002\000\004\027\050\001\002\000" +
    "\006\030\ufff5\051\ufff5\001\002\000\004\033\173\001\002" +
    "\000\006\032\uffee\035\172\001\002\000\004\051\uffec\001" +
    "\002\000\014\005\035\015\034\022\032\025\031\052\012" +
    "\001\002\000\006\032\uffea\035\uffea\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\002\003\003\006\004\005\001\001\000" +
    "\002\001\001\000\004\014\010\001\001\000\002\001\001" +
    "\000\004\004\007\001\001\000\002\001\001\000\004\005" +
    "\014\001\001\000\002\001\001\000\006\006\017\026\020" +
    "\001\001\000\004\014\015\001\001\000\002\001\001\000" +
    "\004\005\016\001\001\000\002\001\001\000\010\011\024" +
    "\012\025\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\160\010\161\026\162\001" +
    "\001\000\006\013\032\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\046\020\040\021\055\022\060\025\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\046\020\147" +
    "\021\055\022\060\025\041\001\001\000\014\016\046\020" +
    "\146\021\055\022\060\025\041\001\001\000\002\001\001" +
    "\000\014\016\046\020\141\021\055\022\060\025\041\001" +
    "\001\000\002\001\001\000\006\017\134\026\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\046\020" +
    "\133\021\055\022\060\025\041\001\001\000\002\001\001" +
    "\000\004\025\122\001\001\000\002\001\001\000\004\014" +
    "\121\001\001\000\014\016\046\020\120\021\055\022\060" +
    "\025\041\001\001\000\002\001\001\000\014\016\046\020" +
    "\062\021\055\022\060\025\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\046\020\117\021\055\022" +
    "\060\025\041\001\001\000\014\016\046\020\116\021\055" +
    "\022\060\025\041\001\001\000\014\016\046\020\115\021" +
    "\055\022\060\025\041\001\001\000\014\016\046\020\114" +
    "\021\055\022\060\025\041\001\001\000\014\016\046\020" +
    "\113\021\055\022\060\025\041\001\001\000\014\016\046" +
    "\020\112\021\055\022\060\025\041\001\001\000\014\016" +
    "\046\020\111\021\055\022\060\025\041\001\001\000\004" +
    "\025\101\001\001\000\014\016\046\020\100\021\055\022" +
    "\060\025\041\001\001\000\002\001\001\000\014\016\046" +
    "\020\077\021\055\022\060\025\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\104" +
    "\024\103\026\105\001\001\000\014\016\046\020\107\021" +
    "\055\022\060\025\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\124\014\035\001\001\000\002\001" +
    "\001\000\014\016\046\020\132\021\055\022\060\025\041" +
    "\001\001\000\014\016\046\020\127\021\055\022\060\025" +
    "\041\001\001\000\002\001\001\000\014\016\046\020\131" +
    "\021\055\022\060\025\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\046\020\136" +
    "\021\055\022\060\025\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\046\020\143\021\055\022\060\025" +
    "\041\001\001\000\002\001\001\000\014\016\046\020\145" +
    "\021\055\022\060\025\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\046\020\151" +
    "\021\055\022\060\025\041\001\001\000\002\001\001\000" +
    "\010\023\155\024\103\026\105\001\001\000\014\016\046" +
    "\020\154\021\055\022\060\025\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\170\025\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\165\014\035" +
    "\001\001\000\004\016\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\173\014\035\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    ComplexSymbolFactory sf;
    ASTNode abstractTree;

    public void init(Scanner s, ComplexSymbolFactory sf){ this.s=s; this.sf = sf;}

    public ASTNode getTree(){return abstractTree;}

    public void report_error(String message, Object info) {
        if (info instanceof ComplexSymbolFactory.ComplexSymbol) {

          ComplexSymbolFactory.ComplexSymbol s = (ComplexSymbolFactory.ComplexSymbol)info;

          // Return previous token if current has no indication of location. Should only happen on EOF.
          if(s.xleft == null || s.xright == null){
              s = ((VSOPScanner)this.s).getPrev();
          }
          List<Integer> expected = expected_token_ids();

          throw new ParserException(s, expected, s.xleft.getLine(), s.xleft.getColumn());
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPParser$actions {
  private final VSOPParser parser;

  /** Constructor */
  CUP$VSOPParser$actions(VSOPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action_part00000000(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassList start_val = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPParser$parser.done_parsing();
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classList 
            {
              ClassList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 abstractTree = cl; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classList ::= classList classItem 
            {
              ClassList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassItem ci = (ClassItem)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassList(cl, ci); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classList ::= classItem 
            {
              ClassList RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassItem ci = (ClassItem)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassList(ci); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classList",1, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classItem ::= CLASS classType classBody 
            {
              ClassItem RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ti = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassItem(ti, cel); RESULT.line = ti.line; RESULT.column = ti.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classItem",2, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classItem ::= CLASS classType EXTENDS classType classBody 
            {
              ClassItem RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Type ti = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int ti_parentleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int ti_parentright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ti_parent = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassItem(ti, ti_parent, cel); RESULT.line = ti.line; RESULT.column = ti.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classItem",2, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classBody ::= LBRACE classElementList RBRACE 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = cel; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classBody",3, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classElementList ::= classElementList field 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassElementList(cel, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classElementList ::= classElementList method 
            {
              ClassElementList RESULT =null;
		int celleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ClassElementList cel = (ClassElementList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ClassElementList(cel, m); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classElementList ::= empty 
            {
              ClassElementList RESULT =null;
		 RESULT = new ClassElementList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classElementList",4, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field ::= identifier COLON type SEMICOLON 
            {
              Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Field(id, ty); RESULT.line = id.line; RESULT.column = id.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("field",7, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= identifier COLON type ASSIGN expr SEMICOLON 
            {
              Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Field(id, ty, val); RESULT.line = id.line; RESULT.column = id.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("field",7, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= identifier LPAR formals RPAR COLON type block 
            {
              Method RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).value;
		int foleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		FormalList fo = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ExprList b = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Method(id, fo, ty, b); id.toMethod(); RESULT.line = id.line; RESULT.column = id.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= classType 
            {
              Type RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = ty; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= INT32 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type("int32"); RESULT.line = ti.getLine(); RESULT.column = ti.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOL 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type("bool"); RESULT.line = ti.getLine(); RESULT.column = ti.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= STRING 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type("string"); RESULT.line = ti.getLine(); RESULT.column = ti.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= UNIT 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type("unit"); RESULT.line = ti.getLine(); RESULT.column = ti.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classType ::= TYPE_IDENTIFIER 
            {
              Type RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Type(ti.getValue()); RESULT.line = ti.getLine(); RESULT.column = ti.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("classType",10, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= formalList formal 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new FormalList(fl, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= empty 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalList ::= formalList formal COMMA 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new FormalList(fl, f); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formalList",5, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalList ::= empty 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formalList",5, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal ::= identifier COLON type 
            {
              Formal RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Formal(id, ty); RESULT.line = id.line; RESULT.column = id.column; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LBRACE exprList expr RBRACE 
            {
              ExprList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ExprList(el, e); RESULT.line = l.getLine(); RESULT.column = l.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exprList ::= exprList expr SEMICOLON 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ExprList(el, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprList ::= empty 
            {
              ExprList RESULT =null;
		 RESULT = new ExprList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF expr THEN expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new If(e1, e2); RESULT.line = i.getLine(); RESULT.column = i.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= IF expr THEN expr ELSE expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new If(e1, e2, e3); RESULT.line = i.getLine(); RESULT.column = i.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= WHILE expr DO expr 
            {
              Expr RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Token w = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new While(e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LET identifier COLON type IN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id, ty, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LET identifier COLON type ASSIGN expr IN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Let(id, ty, e1, e2); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= identifier ASSIGN expr 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Assign(id, e); RESULT.line = a.getLine(); RESULT.column = a.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ISNULL expr 
            {
              Expr RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new UnOp(kw.getTokenType().getStringValue(), e); RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr EQUAL expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr LOWER expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr LOWER_EQUAL expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr POW expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int kwleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token kw = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new BinOp(kw.getTokenType().getStringValue(), e1, e2);
                                                                             RESULT.line = kw.getLine(); RESULT.column = kw.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DOT identifier LPAR args RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList ar = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Call(e, id, ar); id.toMethod(); RESULT.line = l.getLine(); RESULT.column = l.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= identifier LPAR args RPAR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList ar = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 Id selfId = new Id("self"); RESULT = new Call(selfId, id, ar); id.toMethod();
                                                                             selfId.line = id.line; selfId.column = id.column; RESULT.line = l.getLine(); RESULT.column = l.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAR RPAR 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new Null(); RESULT.line = l.getLine(); RESULT.column = l.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NEW classType 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Type ti = (Type)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new New(ti); RESULT.line = n.getLine(); RESULT.column = n.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= identifier 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = id; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= literal 
            {
              Expr RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr li = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = li; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= block 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		ExprList b = (ExprList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // args ::= argList expr 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new ArgList(al, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // args ::= empty 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // argList ::= argList expr COMMA 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-1)).value;
		 RESULT = new ArgList(al, e); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("argList",18, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.elementAt(CUP$VSOPParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // argList ::= empty 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("argList",18, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= INT_LITERAL 
            {
              Expr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token il = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralInteger(il.getValue()); RESULT.line = il.getLine(); RESULT.column = il.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token sl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralString(sl.getValue()); RESULT.line = sl.getLine(); RESULT.column = sl.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= booleanLiteral 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Expr bl = (Expr)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = bl; 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // booleanLiteral ::= TRUE 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralBoolean(bl.getTokenType().getStringValue()); RESULT.line = bl.getLine(); RESULT.column = bl.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // booleanLiteral ::= FALSE 
            {
              Expr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new LiteralBoolean(bl.getTokenType().getStringValue()); RESULT.line = bl.getLine(); RESULT.column = bl.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",16, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifier ::= IDENTIFIER 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$VSOPParser$stack.peek()).value;
		 RESULT = new Id(id.getValue()); RESULT.line = id.getLine(); RESULT.column = id.getColumn(); 
              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("identifier",19, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // empty ::= 
            {
              Object RESULT =null;

              CUP$VSOPParser$result = parser.getSymbolFactory().newSymbol("empty",20, ((java_cup.runtime.Symbol)CUP$VSOPParser$stack.peek()), RESULT);
            }
          return CUP$VSOPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPParser$do_action(
    int                        CUP$VSOPParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPParser$parser,
    java.util.Stack            CUP$VSOPParser$stack,
    int                        CUP$VSOPParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPParser$do_action_part00000000(
                               CUP$VSOPParser$act_num,
                               CUP$VSOPParser$parser,
                               CUP$VSOPParser$stack,
                               CUP$VSOPParser$top);
    }
}

}
